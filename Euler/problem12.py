import math
import itertools
'''
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?'''


def factorization (number):
    divisor = 2
    numberDivisors = []
    while True:
        if number % divisor == 0:
            number = number / divisor
            numberDivisors.append(divisor)
            if number == 1:
                break
        else:
            divisor +=1

    previous = numberDivisors[0]
    nroDividers = 1
    counter = 0
    for number in numberDivisors:
        if number == previous:
            counter+=1
        else:
            nroDividers *= counter+1
            counter = 1
            previous = number

    #Last case
    nroDividers *= counter+1
    
    return nroDividers

def problem12():        
    sequence = 0
    i = 1
    while True:
        sequence += i
        if sequence > 10000:
            divisors = factorization(sequence)
            if divisors > 500:
                break
        i+=1
    print sequence


num =0
j = 0
f = 0
while f < 500:
    j+=1 
    f = 0;
    num = num + j;
    for n in range(1, int(math.sqrt(num))):
        if num % n == 0:
            f = f +2

print num
